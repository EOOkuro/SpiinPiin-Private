# This script creates:-
# 	- One database 
#	- Ralated tables in the database and pre-populate them with default values
#	- Stored procedures
#	- Triggers
#	- Views
#
# Authored by:-
# Name:  Felix Otieno Okoth
# Email: felix@lefins.co.ke
# Date:  Feb 15th 2017

shopt -s -o nounset

declare -r databaseName="SpiinPiinApp"
declare lclhost="localhost"
declare username="null"
#declare password="null"

echo " >> Enter MySql UserName:"
read username

#set /p username="Enter MySql UserName:" %=%

mysql_config_editor set --login-path=local --host="$lclhost" --user="$username" --password

function ExecuteSqlCommand
{
	mysql --login-path=local -e"$1"	
}

function ExecuteSqlTableCommand
{
	mysql --login-path=local -D"$databaseName" -e"$1"
}

printf "... Script Started... \n"

#echo " >> Provide MySql UserName. Press Enter/Retun key without a value to default to 'root' user."
#echo " >> Enter MySql UserName:"
#read username
#	if [[ -z $username ]]; then
#		echo " ** Using 'root' user. ** " 
#		username="root"
#	fi

#echo 
#echo " >> Enter MySql Password:"
#read password

#echo
#echo " >> Provide MySql Database Server Name. Press Enter/Retun key without a value to default to 'localhost'."
#echo " >> Enter MySql Database Server Name:"
#read lclhost
#	if [[ -z $lclhost ]]; then
#		echo " ** Defaulting to 'localhost' as the server. ** " 
#		lclhost="localhost"
#	fi

# List databases that are there in the SQL instance
ExecuteSqlCommand "show databases"

# Deletes the database if it already exists
printf "Deleting $databaseName if it exists \n"
ExecuteSqlCommand "DROP DATABASE IF EXISTS $databaseName"

# Create the database
printf "Creating $databaseName database \n"
ExecuteSqlCommand "CREATE DATABASE IF NOT EXISTS $databaseName"

# List databases that are there in the SQL instance after create
ExecuteSqlCommand "show databases"

# 	Create Occupation table and the related structures
printf "Creating Occupation ... \n"
ExecuteSqlTableCommand "CREATE TABLE IF NOT EXISTS Occupation
	(spin_occupation_id INT NOT NULL AUTO_INCREMENT,
	spin_occupation_name VARCHAR(200) NOT NULL,
	PRIMARY KEY (spin_occupation_id),
	UNIQUE(spin_occupation_name)) ENGINE=INNODB;"

#	Create Occupation function 
printf "Creating Occupation function ... \n"
ExecuteSqlTableCommand "delimiter //
	/*  Populate Occupation */
	INSERT INTO Occupation (spin_occupation_name)
		VALUES ('Pilot / Aviation Industry'),	
			('Engineering'),	
			('Architecture'),
			('Healthcare & Medical'),	
			('Crimonology & forensic science'),
			('Actuarial Science'),	
			('Law'),
			('Monitoring &  Evaluation'),	
			('Statistics'),
			('Accounting / Finance / Actuaries / Auditing'),	
			('Politics'),
			('Lecturer'),	
			('Media Presenters'),
			('Marketing  & Advertising'),	
			('Education & Training'),
			('Executive'),	
			('Customer Service'),
			('Hospitality, Tourism & Catering'),	
			('IT & Telecommunication'),
			('Consulting'),
			('Administrative & Clerical'),	
			('Sales'),
			('Transportation & Warehouse'),	
			('Pastor'),
			('Teacher'),		
			('Farmer'),
			('Natural Resources Management'),
			('Networking and System Administration'),
			('News Anchoring'),
			('NGOs and CBOs Management'),
			('Nursing'),
			('Public Health'),
			('Nutritional Scientist'),
			('Occupational Therapy'),
			('Office Operation'),
			('Oil Industry'),
			('Dentist'),
			('Painting'),
			('Passengers and Crew Handling'),
			('HR'),
			('Petroleum Management'),
			('Pharmaceutical Sales and Marketing'),
			('Pharmacist'),
			('Photography'),
			('Photojournalism'),
			('Physiotherapiest'),
			('Planning'),
			('Plumbing'),
			('Procurement and Logistics'),
			('Production'),
			('Programming and Web Design'),
			('Project Management'),
			('Public Administration'),
			('Public Relations'),
			('Quality Management'),
			('Radio Production'),
			('Range Management'),
			('Real Estate'),
			('Repairs and Maintenance'),
			('Restaurant Management'),
			('Sales and Marketing'),
			('Sales Management & Marketing'),
			('secretarial'),
			('Security & Property Protection'),
			('Social Worker'),
			('Software Development'),
			('Software Engineering'),
			('Sports Administration and Management'),
			('Store Keeping'),
			('Structural Engineer'),
			('Surveyer'),
			('Telecommunication Engineering'),
			('Tour and Travel Management'),
			('Tour Guide'),
			('Traffic Safety Management'),
			('Travel, Tourism and Hospitality'),
			('TV & Film Production'),
			('TV & Radio Presenting'),
			('TV / Video Production'),
			('Web Designer');
	//"

# 	Create Language table and the related structures
printf "Creating Language ... \n"
ExecuteSqlTableCommand "CREATE TABLE IF NOT EXISTS Language
	(spin_language_lciddec INT NOT NULL,
	spin_language_name VARCHAR(100) NOT NULL,
	spin_language_lcidhex VARCHAR(5) NOT NULL,
	spin_language_lastmodfd DATETIME NOT NULL DEFAULT '2000-01-03 04:30:43',
	PRIMARY KEY (spin_language_lciddec)) ENGINE=INNODB;"

#	Create PopulateLanguage function 
printf "Creating PopulateLanguage function ... \n"
ExecuteSqlTableCommand "delimiter //
	/*  Populate Language */
	INSERT INTO Language (spin_language_lciddec, spin_language_name, spin_language_lcidhex)
		VALUES (1101, 'Assamese', '044d'),	
			(1093, 'Bengali (India)', '0445'),	
			(1109, 'Burmese', '0455'),		
			(1126, 'Edo', '0466'),		
			(16393, 'English (India)', '4009'),		
			(1124, 'Filipino', '0464'),		
			(11276, 'French (Cameroon)', '02c0c'),		
			(9228, 'French (Congo, DRC)', '240c'),		
			(12300, 'French (Cote d\'Ivoire)', '300c'),		
			(13324, 'French (Mali)', '340c'),		
			(14348, 'French (Morocco)', '380c'),		
			(10252, 'French (Senegal)', '280c'),		
			(7180, 'French (West Indies)', '1c0c'),		
			(1122, 'Frisian (Netherlands)', '0462'),		
			(2108, 'Gaelic Ireland', '083c'),		
			(1084, 'Gaelic Scotland', '043c'),		
			(1140, 'Guarani (Paraguay)', '0474'),		
			(1279, 'HID (Human Interface Device)', '04ff'),		
			(1136, 'Igbo (Nigeria)', '0470'),		
			(1120, 'Kashmiri', '0460'),		
			(1107, 'Khmer', '0453'),		
			(1108, 'Lao', '0454'),		
			(1142, 'Latin', '0476'),		
			(1100, 'Malayalam', '044c'),		
			(1082, 'Maltese', '043a'),		
			(1112, 'Manipuri', '0458'),		
			(1153, 'Maori (New Zealand)', '0481'),		
			(1121, 'Nepali', '0461'),		
			(1096, 'Oriya', '0448'),		
			(1047, 'Rhaeto-Romanic', '0417'),		
			(2072, 'Romanian (Moldova)', '0818'),		
			(2073, 'Russian (Moldova)', '0819'),		
			(1083, 'Sami Lappish', '043b'),		
			(1072, 'Sesotho', '0430'),		
			(1113, 'Sindhi', '0459'),		
			(1115, 'Sinhalese (Sri Lanka)', '045b'),		
			(1143, 'Somali', '0477'),		
			(1070, 'Sorbian', '042a'),		
			/*(1072, 'Sutu', '0430'),*/		
			(1064, 'Tajik', '0428'),		
			(1105, 'Tibetan', '0451'),		
			(1073, 'Tsonga', '0431'),		
			(1074, 'Tswana', '0432'),		
			(1090, 'Turkmen', '0442'),		
			(1075, 'Venda', '0433'),		
			(1106, 'Welsh', '0452'),		
			(1076, 'Xhosa', '0434'),		
			(1085, 'Yiddish', '043d'),		
			(1077, 'Zulu', '0435'),		
			(1052, 'Albanian', '041c'),
			(14337, 'Arabic (U.A.E.)', '3801'),
			(11274, 'Spanish (Argentina)', '2c0a'),
			(1067, 'Armenian', '042b'),
			(3081, 'English (Australia)', '0c09'),
			(3079, 'German (Austria)', '0c07'),
			(2092, 'Azeri (Cyrillic)', '082c'),
			(1068, 'Azeri (Latin)', '042c'),
			(2067, 'Dutch (Belgium)', '0813'),
			(2060, 'French (Belgium)', '080c'),
			(2117, 'Bengali (Bangladesh)', '0845'),
			(1026, 'Bulgarian', '0402'),
			(15361, 'Arabic (Bahrain)', '3c01'),
			(5146, 'Bosnian (Bosnia/Herzegovina)', '141A'),
			(4122, 'Croatian (Bosnia/Herzegovina)', '101a'),
			(1059, 'Belarusian', '0423'),
			(10249, 'English (Belize)', '2809'),
			(16394, 'Spanish (Bolivia)', '400a'),
			(1046, 'Portuguese (Brazil)', '0416'),
			(2110, 'Malay (Brunei Darussalam)', '083e'),
			(4105, 'English (Canada)', '1009'),
			(3084, 'French (Canada)', '0c0c'),
			(9225, 'English (Caribbean)', '2409'),
			(4108, 'French (Switzerland)', '100c'),
			(2055, 'German (Switzerland)', '0807'),
			(2064, 'Italian (Switzerland)', '0810'),
			(13322, 'Spanish (Chile)', '340a'),
			(2052, 'Chinese (PRC)', '0804'),
			(9226, 'Spanish (Colombia)', '240a'),
			(5130, 'Spanish (Costa Rica)', '140a'),
			(1029, 'Czech', '0405'),
			(1031, 'German (Germany)', '0407'),
			(1030, 'Danish', '0406'),
			(7178, 'Spanish (Dominican Republic)', '1c0a'),
			(5121, 'Arabic (Algeria)', '1401'),
			(12298, 'Spanish (Ecuador)', '300a'),
			(3073, 'Arabic (Egypt)', '0c01'),
			(1069, 'Basque', '042d'),
			(1027, 'Catalan', '0403'),
			(1110, 'Galician', '0456'),
			(3082, 'Spanish (International Sort)', '0c0a'),
			(1034, 'Spanish (Traditional Sort)', '040a'),
			(1061, 'Estonian', '0425'),
			(1118, 'Amharic (Ethiopia)', '045e'),
			(1035, 'Finnish', '040b'),
			(2077, 'Swedish (Finland)', '081d'),
			(1036, 'French (France)', '040c'),
			(1080, 'Faroese', '0438'),
			(2057, 'English (United Kingdom)', '0809'),
			(1079, 'Georgian', '0437'),
			(1032, 'Greek', '0408'),
			(4106, 'Spanish (Guatemala)', '100a'),
			(3076, 'Chinese (Hong Kong S.A.R.)', '0c04'),
			(18442, 'Spanish (Honduras)', '480a'),
			(1050, 'Croatian', '041a'),
			(1038, 'Hungarian', '040e'),
			(1057, 'Indonesian', '0421'),
			(1095, 'Gujarati', '0447'),
			(1081, 'Hindi', '0439'),
			(1099, 'Kannada', '044b'),
			(1111, 'Konkani', '0457'),
			(1102, 'Marathi', '044e'),
			(1094, 'Punjabi', '0446'),
			(1103, 'Sanskrit', '044f'),
			(1097, 'Tamil', '0449'),
			(1098, 'Telugu', '044a'),
			(6153, 'English (Ireland)', '1809'),
			(1065, 'Farsi', '0429'),
			(2049, 'Arabic (Iraq)', '0801'),
			(1039, 'Icelandic', '040f'),
			(1037, 'Hebrew', '040d'),
			(1040, 'Italian (Italy)', '0410'),
			(8201, 'English (Jamaica)', '2009'),
			(11265, 'Arabic (Jordan)', '2c01'),
			(1041, 'Japanese', '0411'),
			(1087, 'Kazakh', '043f'),
			(1089, 'Swahili', '0441'),
			(1088, 'Kyrgyz (Cyrillic)', '0440'),
			(1042, 'Korean', '0412'),
			(13313, 'Arabic (Kuwait)', '3401'),
			(12289, 'Arabic (Lebanon)', '3001'),
			(4097, 'Arabic (Libya)', '1001'),
			(5127, 'German (Liechtenstein)', '1407'),
			(1063, 'Lithuanian', '0427'),
			(5132, 'French (Luxembourg)', '140c'),
			(4103, 'German (Luxembourg)', '1007'),
			(1062, 'Latvian', '0426'),
			(6145, 'Arabic (Morocco)', '1801'),
			(5124, 'Chinese (Macau S.A.R.)', '1404'),
			(6156, 'French (Monaco)', '180c'),
			(1125, 'Divehi', '0465'),
			(2058, 'Spanish (Mexico)', '080a'),
			(1071, 'FYRO Macedonian', '042f'),
			(1104, 'Mongolian (Cyrillic)', '0450'),
			(2128, 'Mongolian (Mongolia)', '0850'),
			(1086, 'Malay (Malaysia)', '043e'),
			(19466, 'Spanish (Nicaragua)', '4c0a'),
			(1043, 'Dutch (Netherlands)', '0413'),
			(1044, 'Norwegian (Bokmal)', '0414'),
			(2068, 'Norwegian (Nynorsk)', '0814'),
			(5129, 'English (New Zealand)', '1409'),
			(8193, 'Arabic (Oman)', '2001'),
			(1056, 'Urdu', '0420'),
			(6154, 'Spanish (Panama)', '180a'),
			(10250, 'Spanish (Peru)', '280a'),
			(13321, 'English (Philippines)', '3409'),
			(1045, 'Polish', '0415'),
			(20490, 'Spanish (Puerto Rico)', '500a'),
			(2070, 'Portuguese (Portugal)', '0816'),
			(15370, 'Spanish (Paraguay)', '3c0a'),
			(16385, 'Arabic (Qatar)', '4001'),
			(1048, 'Romanian', '0418'),
			(1049, 'Russian', '0419'),
			(1092, 'Tatar', '0444'),
			(1025, 'Arabic (Saudi Arabia)', '0401'),
			(4100, 'Chinese (Singapore)', '1004'),
			(17418, 'Spanish (El Salvador)', '440a'),
			(3098, 'Serbian (Cyrillic)', '0c1a'),
			(2074, 'Serbian (Latin)', '081a'),
			(1051, 'Slovak', '041b'),
			(1060, 'Slovenian', '0424'),
			(1053, 'Swedish', '041d'),
			(10241, 'Arabic (Syria)', '2801'),
			(1114, 'Syriac', '045a'),
			(1054, 'Thai', '041e'),
			(11273, 'English (Trinidad)', '2c09'),
			(7169, 'Arabic (Tunisia)', '1c01'),
			(1055, 'Turkish', '041f'),
			(1028, 'Chinese (Taiwan)', '0404'),
			(1058, 'Ukrainian', '0422'),
			(14346, 'Spanish (Uruguay)', '380a'),
			(1033, 'English (United States)', '0409'),
			(2115, 'Uzbek (Cyrillic)', '0843'),
			(1091, 'Uzbek (Latin)', '0443'),
			(8202, 'Spanish (Venezuela)', '200a'),
			(1066, 'Vietnamese', '042a'),
			(9217, 'Arabic (Yemen)', '2401'),
			(1078, 'Afrikaans', '0436'),
			(7177, 'English (South Africa)', '1c09'),
			(12297, 'English (Zimbabwe)', '3009');
	//"

# 	Create Country table and the related structures
printf "Creating Country ... \n"
ExecuteSqlTableCommand "CREATE TABLE IF NOT EXISTS Country
	(spin_country_code VARCHAR(4) NOT NULL,
	spin_country_desc VARCHAR(200) NOT NULL,
	spin_country_lastmodfd DATETIME NOT NULL DEFAULT '2000-01-03 04:30:43',
	PRIMARY KEY (spin_country_code),
	UNIQUE(spin_country_desc)) ENGINE=INNODB;"

#	Create PopulateCountry function 
printf "Creating PopulateCountry function ... \n"
ExecuteSqlTableCommand "delimiter //
	/* Populate Country */
	INSERT INTO Country (spin_country_code, spin_country_desc)
		VALUES ('AFG', 'AFGHANISTAN'),
			('ALB', 'ALBANIA'),
			('DZA', 'ALGERIA'),
			('ASM', 'AMERICAN SAMOA'),
			('AND', 'ANDORRA'),
			('AGO', 'ANGOLA'),
			('AIA', 'ANGUILLA'),
			('ATA', 'ANTARCTICA'),
			('ATG', 'ANTIGUA AND BARBUDA'),
			('ARG', 'ARGENTINA'),
			('ARM', 'ARMENIA'),
			('ABW', 'ARUBA'),
			('AUS', 'AUSTRALIA'),
			('AUT', 'AUSTRIA'),
			('AZE', 'AZERBAIJAN'),
			('BHS', 'BAHAMAS'),
			('BHR', 'BAHRAIN'),
			('BGD', 'BANGLADESH'),
			('BRB', 'BARBADOS'),
			('BLR', 'BELARUS'),
			('BEL', 'BELGIUM'),
			('BLZ', 'BELIZE'),
			('BEN', 'BENIN'),
			('BMU', 'BERMUDA'),
			('BTN', 'BHUTAN'),
			('BOL', 'BOLIVIA'),
			('BIH', 'BOSNIA AND HERZEGOWINA'),
			('BWA', 'BOTSWANA'),
			('BVT', 'BOUVET ISLAND'),
			('BRA', 'BRAZIL'),
			('IOT', 'BRITISH INDIAN OCEAN TERRITORY'),
			('BRN', 'BRUNEI DARUSSALAM'),
			('BGR', 'BULGARIA'),
			('BFA', 'BURKINA FASO'),
			('BDI', 'BURUNDI'),
			('KHM', 'CAMBODIA'),
			('CMR', 'CAMEROON'),
			('CAN', 'CANADA'),
			('CPV', 'CAPE VERDE'),
			('CYM', 'CAYMAN ISLANDS'),
			('CAF', 'CENTRAL AFRICAN REPUBLIC'),
			('TCD', 'CHAD'),
			('CHL', 'CHILE'),
			('CHN', 'CHINA'),
			('CXR', 'CHRISTMAS ISLAND'),
			('CCK', 'COCOS (KEELING) ISLANDS'),
			('COL', 'COLOMBIA'),
			('COM', 'COMOROS'),
			('COG', 'CONGO'),
			('COD', 'CONGO, THE DRC'),
			('COK', 'COOK ISLANDS'),
			('CRI', 'COSTA RICA'),
			('CIV', 'COTE D\'IVOIRE'),
			('HRV', 'CROATIA'),
			('CUB', 'CUBA'),
			('CYP', 'CYPRUS'),
			('CZE', 'CZECH REPUBLIC'),
			('DNK', 'DENMARK'),
			('DJI', 'DJIBOUTI'),
			('DMA', 'DOMINICA'),
			('DOM', 'DOMINICAN REPUBLIC'),
			('TMP', 'EAST TIMOR'),
			('ECU', 'ECUADOR'),
			('EGY', 'EGYPT'),
			('SLV', 'EL SALVADOR'),
			('GNQ', 'EQUATORIAL GUINEA'),
			('ERI', 'ERITREA'),
			('EST', 'ESTONIA'),
			('ETH', 'ETHIOPIA '),
			('FRO', 'FAROE ISLANDS'),
			('FJI', 'FIJI'),
			('FIN', 'FINLAND'),
			('FRA', 'FRANCE'),
			('FXX', 'FRANCE, METROPOLITAN'),
			('GUF', 'FRENCH GUIANA'),
			('PYF', 'FRENCH POLYNESIA'),
			('ATF', 'FRENCH SOUTHERN TERRITORIES'),
			('GAB', 'GABON'),
			('FLK', 'FALKLAND ISLANDS (MALVINAS)'),
			('GMB', 'GAMBIA'),
			('GEO', 'GEORGIA'),
			('DEU', 'GERMANY'),
			('GHA', 'GHANA'),
			('GIB', 'GIBRALTAR'),
			('GRC', 'GREECE'),
			('GRL', 'GREENLAND'),
			('GRD', 'GRENADA'),
			('GLP', 'GUADELOUPE'),
			('GUM', 'GUAM'),
			('GTM', 'GUATEMALA'),
			('GIN', 'GUINEA'),
			('GNB', 'GUINEA-BISSAU'),
			('GUY', 'GUYANA'),
			('HTI', 'HAITI'),
			('HMD', 'HEARD AND MC DONALD ISLANDS'),
			('VAT', 'HOLY SEE (VATICAN CITY STATE)'),
			('HND', 'HONDURAS'),
			('HKG', 'HONG KONG'),
			('HUN', 'HUNGARY'),
			('ISL', 'ICELAND'),
			('IND', 'INDIA'),
			('IDN', 'INDONESIA'),
			('IRN', 'IRAN (ISLAMIC REPUBLIC OF)'),
			('IRQ', 'IRAQ'),
			('IRL', 'IRELAND'),
			('ISR', 'ISRAEL'),
			('ITA', 'ITALY'),
			('JAM', 'JAMAICA'),
			('JPN', 'JAPAN'),
			('JOR', 'JORDAN'),
			('KAZ', 'KAZAKHSTAN'),
			('KEN', 'KENYA'),
			('KIR', 'KIRIBATI'),
			('PRK', 'KOREA, D.P.R.O.'),
			('KOR', 'KOREA, REPUBLIC OF'),
			('KWT', 'KUWAIT'),
			('KGZ', 'KYRGYZSTAN'),
			('LAO', 'LAOS'),
			('LVA', 'LATVIA'),
			('LBN', 'LEBANON'),
			('LSO', 'LESOTHO'),
			('LBR', 'LIBERIA'),
			('LBY', 'LIBYAN ARAB JAMAHIRIYA'),
			('LIE', 'LIECHTENSTEIN'),
			('LTU', 'LITHUANIA'),
			('LUX', 'LUXEMBOURG'),
			('MAC', 'MACAU'),
			('MKD', 'MACEDONIA'),
			('MDG', 'MADAGASCAR'),
			('MWI', 'MALAWI'),
			('MYS', 'MALAYSIA'),
			('MDV', 'MALDIVES'),
			('MLI', 'MALI'),
			('MLT', 'MALTA'),
			('MHL', 'MARSHALL ISLANDS'),
			('MTQ', 'MARTINIQUE'),
			('MRT', 'MAURITANIA'),
			('MUS', 'MAURITIUS'),
			('MYT', 'MAYOTTE'),
			('MEX', 'MEXICO'),
			('FSM', 'MICRONESIA, FEDERATED STATES OF'),
			('MDA', 'MOLDOVA, REPUBLIC OF'),
			('MCO', 'MONACO'),
			('MNG', 'MONGOLIA'),
			('MSR', 'MONTSERRAT'),
			('MAR', 'MOROCCO'),
			('MOZ', 'MOZAMBIQUE'),
			('MMR', 'MYANMAR (Burma)'),
			('NAM', 'NAMIBIA'),
			('NRU', 'NAURU'),
			('NPL', 'NEPAL'),
			('NLD', 'NETHERLANDS'),
			('ANT', 'NETHERLANDS ANTILLES'),
			('NCL', 'NEW CALEDONIA'),
			('NZL', 'NEW ZEALAND'),
			('NIC', 'NICARAGUA'),
			('NER', 'NIGER'),
			('NGA', 'NIGERIA'),
			('NIU', 'NIUE'),
			('NFK', 'NORFOLK ISLAND'),
			('MNP', 'NORTHERN MARIANA ISLANDS'),
			('NOR', 'NORWAY'),
			('OMN', 'OMAN'),
			('PAK', 'PAKISTAN'),
			('PLW', 'PALAU'),
			('PAN', 'PANAMA'),
			('PNG', 'PAPUA NEW GUINEA'),
			('PRY', 'PARAGUAY'),
			('PER', 'PERU'),
			('PHL', 'PHILIPPINES'),
			('PCN', 'PITCAIRN'),
			('POL', 'POLAND'),
			('PRT', 'PORTUGAL'),
			('PRI', 'PUERTO RICO'),
			('QAT', 'QATAR'),
			('REU', 'REUNION'),
			('ROM', 'ROMANIA'),
			('RUS', 'RUSSIAN FEDERATION'),
			('RWA', 'RWANDA'),
			('KNA', 'SAINT KITTS AND NEVIS'),
			('LCA', 'SAINT LUCIA'),
			('VCT', 'SAINT VINCENT AND THE GRENADINES'),
			('WSM', 'SAMOA'),
			('SMR', 'SAN MARINO'),
			('STP', 'SAO TOME AND PRINCIPE'),
			('SAU', 'SAUDI ARABIA'),
			('SEN', 'SENEGAL'),
			('SYC', 'SEYCHELLES'),
			('SLE', 'SIERRA LEONE'),
			('SGP', 'SINGAPORE'),
			('SVK', 'SLOVAKIA (Slovak Republic)'),
			('SVN', 'SLOVENIA'),
			('SLB', 'SOLOMON ISLANDS'),
			('SOM', 'SOMALIA'),
			('ZAF', 'SOUTH AFRICA'),
			('SGS', 'SOUTH GEORGIA AND SOUTH S.S.'),
			('ESP', 'SPAIN'),
			('LKA', 'SRI LANKA'),
			('SHN', 'ST. HELENA'),
			('SPM', 'ST. PIERRE AND MIQUELON'),
			('SDN', 'SUDAN'),
			('SUR', 'SURINAME'),
			('SJM', 'SVALBARD AND JAN MAYEN ISLANDS'),
			('SWZ', 'SWAZILAND'),
			('SWE', 'SWEDEN'),
			('CHE', 'SWITZERLAND'),
			('SYR', 'SYRIAN ARAB REPUBLIC'),
			('TWN', 'TAIWAN, PROVINCE OF CHINA'),
			('TJK', 'TAJIKISTAN'),
			('TZA', 'TANZANIA, UNITED REPUBLIC OF'),
			('THA', 'THAILAND'),
			('TGO', 'TOGO'),
			('TKL', 'TOKELAU'),
			('TON', 'TONGA'),
			('TTO', 'TRINIDAD AND TOBAGO'),
			('TUN', 'TUNISIA'),
			('TUR', 'TURKEY'),
			('TKM', 'TURKMENISTAN'),
			('TCA', 'TURKS AND CAICOS ISLANDS'),
			('TUV', 'TUVALU'),
			('UGA', 'UGANDA'),
			('UKR', 'UKRAINE'),
			('ARE', 'UNITED ARAB EMIRATES'),
			('GBR', 'UNITED KINGDOM'),
			('USA', 'UNITED STATES'),
			('UMI', 'U.S. MINOR ISLANDS'),
			('URY', 'URUGUAY'),
			('UZB', 'UZBEKISTAN'),
			('VUT', 'VANUATU'),
			('VEN', 'VENEZUELA'),
			('VNM', 'VIET NAM'),
			('VGB', 'VIRGIN ISLANDS (BRITISH)'),
			('VIR', 'VIRGIN ISLANDS (U.S.)'),
			('WLF', 'WALLIS AND FUTUNA ISLANDS'),
			('ESH', 'WESTERN SAHARA'),
			('YEM', 'YEMEN'),
			('YUG', 'Yugoslavia (Serbia and Montenegro)'),
			('ZMB', 'ZAMBIA'),
			('ZWE', 'ZIMBABWE');
	//"

#	Create Member table and the related structures
printf "Creating Member ... \n"
ExecuteSqlTableCommand "CREATE TABLE IF NOT EXISTS Member 
	(spin_memb_mbrid CHAR(36) NOT NULL,
	spin_memb_fid CHAR(50) NOT NULL,
	spin_memb_provider VARCHAR(100) NOT NULL,
	spin_memb_femail VARCHAR(100) NOT NULL,
	spin_memb_module ENUM('ADMIN', 'CLIENT', 'SUPPORT', 'ALL') NOT NULL,
	spin_memb_stype ENUM('AGENT', 'INSURANCE', 'CLIENT', 'NA') NOT NULL,	
	spin_memb_gender ENUM('MALE', 'FEMALE', 'BOTH', 'NA') NOT NULL,	
	spin_memb_dname VARCHAR(50) NOT NULL,
	spin_memb_fname VARCHAR(15),
	spin_memb_mname VARCHAR(15),
	spin_memb_lname VARCHAR(15),	
	spin_memb_photo LONGBLOB,
	spin_memb_email VARCHAR(100),
	spin_memb_dob DATE,
	PRIMARY KEY (spin_memb_mbrid),
	UNIQUE (spin_memb_fid, spin_memb_provider)) ENGINE=INNODB;"

#	Create Contact table and the related structures
printf "Creating Contact ... \n"
ExecuteSqlTableCommand "CREATE TABLE IF NOT EXISTS Contact 
	(spin_membc_id INT NOT NULL AUTO_INCREMENT,
	spin_membc_mid CHAR(36) NOT NULL,
	spin_membc_name VARCHAR(50) NOT NULL,
	spin_membc_country VARCHAR(4) NOT NULL,	
	spin_membc_postaladdr VARCHAR(200),
	spin_membc_phyloc VARCHAR(200),
	spin_membc_homephone VARCHAR(20),
	spin_membc_mobile VARCHAR(20),
	spin_membc_zip VARCHAR(10),
	PRIMARY KEY (spin_membc_id),
	FOREIGN KEY (spin_membc_mid) 
		REFERENCES Member(spin_memb_mbrid) ON UPDATE CASCADE ON DELETE RESTRICT,
	FOREIGN KEY (spin_membc_country) 
		REFERENCES Country(spin_country_code) ON UPDATE CASCADE ON DELETE RESTRICT) ENGINE=INNODB;"

#	Create Article table and the related structures
printf "Creating Article ... \n"
ExecuteSqlTableCommand "CREATE TABLE IF NOT EXISTS Article 
	(spin_article_id INT NOT NULL AUTO_INCREMENT,
	spin_article_mid CHAR(36) NOT NULL,
	spin_article_title VARCHAR(200) NOT NULL,
	spin_article_detail VARCHAR(4000) NOT NULL,	
	spin_article_date DATE NOT NULL,
	spin_article_img LONGBLOB,
	spin_article_lat FLOAT(12,2),
	spin_article_long FLOAT(12,2),
	PRIMARY KEY (spin_article_id),
	FOREIGN KEY (spin_article_mid) 
		REFERENCES Member(spin_memb_mbrid) ON UPDATE CASCADE ON DELETE RESTRICT) ENGINE=INNODB;"
